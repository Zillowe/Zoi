name: GitLab Mirror

on:
  issues:
    types: [opened, edited, closed, reopened]
  workflow_dispatch:
    inputs:
      pull_request_number:
        description: "The number of the GitHub Pull Request to mirror"
        required: true

jobs:
  mirror-to-gitlab:
    runs-on: blacksmith-4vcpu-ubuntu-2204
    environment: gated-env
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Install glab
        run: |
          sudo apt-get update
          curl -sSL "https://raw.githubusercontent.com/upciti/wakemeops/main/assets/install_repository" | sudo bash
          sudo apt-get update
          sudo apt-get install -y glab

      - name: Mirror Issue
        if: github.event_name == 'issues'
        env:
          GITLAB_TOKEN: ${{ secrets.GITLAB_TOKEN }}
          GITLAB_PROJECT: "Zillowe/Zillwen/Zusty/Zoi"
          GITHUB_ISSUE_TITLE: ${{ github.event.issue.title }}
          GITHUB_ISSUE_BODY: ${{ github.event.issue.body }}
          GITHUB_ISSUE_NUMBER: ${{ github.event.issue.number }}
          GITHUB_ACTION: ${{ github.event.action }}
        run: |
          GITLAB_ISSUE_IID=$(glab issue list --repo $GITLAB_MAIN_PROJECT --in "GitHub Issue #${GITHUB_PR_NUMBER}:" -F ids 2>/dev/null | grep '^[0-9]\+$' || true)

          if [ -z "$GITLAB_ISSUE_IID" ]; then
            if [ "${{ env.GITHUB_ACTION }}" == "opened" ]; then
              glab issue create --repo "$GITLAB_PROJECT" -t "GitHub Issue #${GITHUB_ISSUE_NUMBER}: $GITHUB_ISSUE_TITLE" -d "$GITHUB_ISSUE_BODY"
            fi
          else
            if [ "${{ env.GITHUB_ACTION }}" == "edited" ]; then
              glab issue update "$GITLAB_ISSUE_IID" --repo "$GITLAB_PROJECT" -t "GitHub Issue #${GITHUB_ISSUE_NUMBER}: $GITHUB_ISSUE_TITLE" -d "$GITHUB_ISSUE_BODY"
            elif [ "${{ env.GITHUB_ACTION }}" == "closed" ]; then
              glab issue close "$GITLAB_ISSUE_IID" --repo "$GITLAB_PROJECT"
            elif [ "${{ env.GITHUB_ACTION }}" == "reopened" ]; then
              glab issue reopen "$GITLAB_ISSUE_IID" --repo "$GITLAB_PROJECT"
            fi
          fi

      - name: Fetch PR Data
        if: github.event_name == 'workflow_dispatch'
        id: pr_data
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.inputs.pull_request_number }}
        run: |
          PR_JSON=$(gh pr view $PR_NUMBER --json author,headRefName,baseRefName,title,body,number,state)

          echo "pr_user=$(echo $PR_JSON | jq -r .author.login)" >> $GITHUB_OUTPUT
          echo "pr_source_branch=$(echo $PR_JSON | jq -r .headRefName)" >> $GITHUB_OUTPUT
          echo "pr_target_branch=$(echo $PR_JSON | jq -r .baseRefName)" >> $GITHUB_OUTPUT
          echo "pr_title=$(echo $PR_JSON | jq -r .title)" >> $GITHUB_OUTPUT
          echo "pr_body=$(echo $PR_JSON | jq -r .body)" >> $GITHUB_OUTPUT
          echo "pr_number=$(echo $PR_JSON | jq -r .number)" >> $GITHUB_OUTPUT
          echo "pr_state=$(echo $PR_JSON | jq -r .state)" >> $GITHUB_OUTPUT

      - name: Push PR Branch to GitLab Fork
        if: github.event_name == 'workflow_dispatch'
        env:
          GITLAB_FORK_PROJECT_PATH: "Zillowe/Zillwen/Zusty/Zoi-2"
          GL_TOKEN: ${{ secrets.GL_TOKEN }}
          GITHUB_PR_NUMBER: ${{ steps.pr_data.outputs.pr_number }}
          GITHUB_PR_USER: ${{ steps.pr_data.outputs.pr_user }}
          GITHUB_PR_SOURCE_BRANCH: ${{ steps.pr_data.outputs.pr_source_branch }}
        run: |
          GITLAB_BRANCH_NAME="${GITHUB_PR_USER}/${GITHUB_PR_SOURCE_BRANCH}"
          git config --global user.name "GitHub Actions Mirror"
          git config --global user.email "actions-mirror@github.com"
          git remote add gitlab "https://oauth2:${GL_TOKEN}@gitlab.com/${GITLAB_FORK_PROJECT_PATH}.git"

          echo "Fetching PR #${GITHUB_PR_NUMBER} from GitHub..."
          git fetch origin "refs/pull/${GITHUB_PR_NUMBER}/head"

          echo "Pushing to GitLab fork branch '${GITLAB_BRANCH_NAME}'..."
          git push -u gitlab FETCH_HEAD:"refs/heads/${GITLAB_BRANCH_NAME}" --force

      - name: Create or Update Cross-Project Merge Request
        if: github.event_name == 'workflow_dispatch'
        env:
          GITLAB_MAIN_PROJECT: "Zillowe/Zillwen/Zusty/Zoi"
          GITLAB_FORK_PROJECT: "Zillowe/Zillwen/Zusty/Zoi-2"
          GITLAB_TOKEN: ${{ secrets.GL_TOKEN }}
          GITHUB_PR_NUMBER: ${{ steps.pr_data.outputs.pr_number }}
          GITHUB_PR_TITLE: ${{ steps.pr_data.outputs.pr_title }}
          GITHUB_PR_BODY: ${{ steps.pr_data.outputs.pr_body }}
          GITHUB_PR_STATE: ${{ steps.pr_data.outputs.pr_state }}
          GITHUB_PR_USER: ${{ steps.pr_data.outputs.pr_user }}
          GITHUB_PR_SOURCE_BRANCH: ${{ steps.pr_data.outputs.pr_source_branch }}
          GITHUB_PR_TARGET_BRANCH: ${{ steps.pr_data.outputs.pr_target_branch }}
        run: |
          GITLAB_BRANCH_NAME="${GITHUB_PR_USER}/${GITHUB_PR_SOURCE_BRANCH}"

          export GITLAB_MR_IID=$(glab mr list --repo $GITLAB_MAIN_PROJECT --search "GitHub PR #${GITHUB_PR_NUMBER}:" -F ids 2>/dev/null | grep '^[0-9]\+$' || true)

          if [ -z "$GITLAB_MR_IID" ]; then
            if [ "${{ env.GITHUB_PR_STATE }}" == "OPEN" ]; then
              echo "Creating new cross-project MR from source repo '${GITLAB_FORK_PROJECT}'..."
              glab mr create \
                --title "GitHub PR #${GITHUB_PR_NUMBER}: $GITHUB_PR_TITLE" \
                --description "$GITHUB_PR_BODY" \
                --source-branch "$GITLAB_BRANCH_NAME" \
                --target-branch "$GITHUB_PR_TARGET_BRANCH" \
                --head "$GITLAB_FORK_PROJECT" \
                --remove-source-branch \
                --yes
            fi
          else
            echo "MR Already exists"
          fi
