stages:
  - test
  - build
  - package
  - release

check_build:
  stage: test
  image: rust:latest
  tags:
    - saas-linux-large-amd64
  variables:
    RUSTFLAGS: "-Dwarnings"
  before_script:
    - apt-get update -y && apt-get install -y build-essential gcc
  script:
    - echo "--- Checking build ---"
    - cargo check --verbose
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_BRANCH

# build:linux:
#   stage: build
#   image: rust:latest
#   tags:
#     - saas-linux-large-amd64
#   before_script:
#     - dpkg --add-architecture arm64
#     - dpkg --add-architecture armhf
#     - apt-get update -y && apt-get install -y build-essential gcc gcc-aarch64-linux-gnu libssl-dev pkg-config libssl-dev:arm64 openssl libssl-dev:armhf gcc-mingw-w64-x86-64 liblzma-dev:arm64
#   script:
#     - echo "Building Linux targets (amd64, arm64) and Windows (amd64)..."
#     - chmod +x ./build/build-linux.sh
#     - ./build/build-linux.sh
#   artifacts:
#     paths:
#       - ./build/release/
#     expire_in: 1 week
#   rules:
#     - if: $CI_COMMIT_TAG
#
# build:macos:
#   stage: build
#   tags:
#     - saas-macos-medium-m1
#   image: macos-15-xcode-16
#   before_script:
#     - curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
#     - source ~/.cargo/env
#   script:
#     - echo "Building macOS targets (amd64, arm64)..."
#     - chmod +x ./build/build-macos.sh
#     - ./build/build-macos.sh
#   artifacts:
#     paths:
#       - ./build/release/
#     expire_in: 1 week
#   rules:
#     - if: $CI_COMMIT_TAG

build:freebsd-amd64:
  stage: build
  image: ghcr.io/taiki-e/rust-cross-toolchain:x86_64-unknown-freebsd-dev-arm64v8
  tags:
    - saas-linux-large-amd64
  before_script:
    - rustup update nightly && rustup default nightly
  script:
    - echo "Building FreeBSD targets (amd64)..."
    - chmod +x ./build/bsd/freebsd-amd64.sh
    - ./build/bsd/freebsd-amd64.sh
  artifacts:
    paths:
      - ./build/release/
    expire_in: 1 week
  rules:
    - if: $CI_COMMIT_TAG

build:freebsd-arm64:
  stage: build
  image: ghcr.io/taiki-e/rust-cross-toolchain:aarch64-unknown-freebsd-dev-amd64
  tags:
    - saas-linux-large-amd64
  before_script:
    - rustup update nightly && rustup default nightly
  script:
    - echo "Building FreeBSD targets (arm64)..."
    - chmod +x ./build/bsd/freebsd-arm64.sh
    - ./build/bsd/freebsd-arm64.sh
  artifacts:
    paths:
      - ./build/release/
    expire_in: 1 week
  rules:
    - if: $CI_COMMIT_TAG

build:openbsd-amd64:
  stage: build
  image: ghcr.io/taiki-e/rust-cross-toolchain:x86_64-unknown-openbsd-dev-arm64v8
  tags:
    - saas-linux-large-amd64
  before_script:
    - rustup update nightly && rustup default nightly
  script:
    - echo "Building OpenBSD targets (amd64)..."
    - chmod +x ./build/bsd/openbsd-amd64.sh
    - ./build/bsd/openbsd-amd64.sh
  artifacts:
    paths:
      - ./build/release/
    expire_in: 1 week
  rules:
    - if: $CI_COMMIT_TAG

build:openbsd-arm64:
  stage: build
  image: ghcr.io/taiki-e/rust-cross-toolchain:aarch64-unknown-openbsd-dev-amd64
  tags:
    - saas-linux-large-amd64
  before_script:
    - rustup update nightly && rustup default nightly
  script:
    - echo "Building OpenBSD targets (arm64)..."
    - chmod +x ./build/bsd/openbsd-arm64.sh
    - ./build/bsd/openbsd-arm64.sh
  artifacts:
    paths:
      - ./build/release/
    expire_in: 1 week
  rules:
    - if: $CI_COMMIT_TAG

# build:windows:
#   stage: build
#   tags:
#     - saas-windows-medium-amd64
#   variables:
#     GIT_STRATEGY: fetch
#   script:
#     - echo "Building for Windows ARM64..."
#     - pwsh -File ./build/build-win.ps1
#   artifacts:
#     paths:
#       - ./build/release/
#     expire_in: 1 week
#   rules:
#     - if: $CI_COMMIT_TAG

package:archive:
  stage: package
  image: ubuntu:latest
  before_script:
    - apt-get update -y && apt-get install -y p7zip-full tar zstd bsdiff curl
    - curl -sL https://gitlab.com/gitlab-org/cli/-/releases/v1.64.0/downloads/glab_1.64.0_linux_amd64.deb -o glab.deb
    - dpkg -i glab.deb
  script:
    - echo "Aggregating build artifacts..."
    - echo "Contents of the release directory:"
    - ls -lR ./build/release/
    - echo "Running archive script..."
    - chmod +x ./build/archive.sh
    - ./build/archive.sh
    - echo "Archiving complete."
  needs:
    - job: check_build
      optional: true
    # - build:linux
    # - build:macos
    - build:freebsd-amd64
    - build:freebsd-arm64
    - build:openbsd-amd64
    - build:openbsd-arm64
    # - build:windows
  artifacts:
    paths:
      - ./build/archived/
    expire_in: 1 week
  rules:
    - if: $CI_COMMIT_TAG

create_release:
  stage: release
  image: gitlab/glab
  script:
    - glab auth login --token $GITLAB_TOKEN_RELEASE
    - glab release create "$CI_COMMIT_TAG" ./build/archived/* --name "$CI_COMMIT_TAG_MESSAGE" --notes "Zoi release for $CI_COMMIT_TAG_MESSAGE"
  needs:
    - package:archive
  rules:
    - if: $CI_COMMIT_TAG
