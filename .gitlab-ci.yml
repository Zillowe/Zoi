stages:
  - test
  - build
  - package
  - release
  - release-package

check_build:
  stage: test
  image: rust:latest
  tags:
    - saas-linux-large-amd64
  variables:
    RUSTFLAGS: "-Dwarnings"
  before_script:
    - apt-get update -y && apt-get install -y build-essential gcc libgpg-error-dev libgpgme-dev
  script:
    - echo "--- Checking build ---"
    - cargo check --verbose
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_BRANCH

build:linux:
  stage: build
  image: rust:latest
  tags:
    - saas-linux-large-amd64
  before_script:
    - dpkg --add-architecture arm64
    - dpkg --add-architecture armhf
    - apt-get update -y
    - apt-get install -y build-essential gcc libssl-dev pkg-config openssl gcc-mingw-w64-x86-64 libgpg-error-dev libgpgme-dev
    - apt-get install -y gcc-aarch64-linux-gnu libssl-dev:arm64 libssl-dev:armhf liblzma-dev:arm64 libgpg-error-dev:arm64 libgpgme-dev:arm64
    - export PKG_CONFIG_PATH="/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/lib/pkgconfig:/usr/share/pkgconfig:$PKG_CONFIG_PATH"
    - pkg-config --exists gpg-error || echo "gpg-error.pc not found"
  script:
    - echo "Building Linux (amd64, arm64) and Windows (amd64) targets..."
    - chmod +x ./build/build-linux.sh
    - ./build/build-linux.sh
  artifacts:
    paths:
      - ./build/release/
    expire_in: 1 week
  rules:
    - if: $CI_COMMIT_TAG

build:macos:
  stage: build
  tags:
    - saas-macos-medium-m1
  image: macos-15-xcode-16
  before_script:
    - curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
    - source ~/.cargo/env
    - brew install libgpg-error gpgme xz
    - arch -x86_64 brew install libgpg-error gpgme xz
    - export PKG_CONFIG_ALLOW_CROSS=1
    - export PKG_CONFIG_PATH="/opt/homebrew/lib/pkgconfig:/usr/local/lib/pkgconfig"
    - export LIBRARY_PATH="/opt/homebrew/lib:/usr/local/lib:$LIBRARY_PATH"
    - export LDFLAGS="-L/opt/homebrew/lib -L/usr/local/lib"
    - export CPPFLAGS="-I/opt/homebrew/include -I/usr/local/include"
    - export CC_x86_64_apple_darwin="clang -target x86_64-apple-darwin"
    - export CXX_x86_64_apple_darwin="clang++ -target x86_64-apple-darwin"
  script:
    - echo "Building macOS targets (amd64, arm64)..."
    - chmod +x ./build/build-macos.sh
    - ./build/build-macos.sh
  artifacts:
    paths:
      - ./build/release/
    expire_in: 1 week
  rules:
    - if: $CI_COMMIT_TAG

package:archive:
  stage: package
  image: ubuntu:latest
  before_script:
    - apt-get update -y && apt-get install -y p7zip-full tar zstd bsdiff curl git jq unzip
  script:
    - echo "Aggregating build artifacts..."
    - echo "Contents of the release directory:"
    - ls -lR ./build/release/
    - echo "Running archive script..."
    - chmod +x ./build/archive.sh
    - ./build/archive.sh
    - echo "Archiving complete."
  needs:
    - job: check_build
      optional: true
    - build:linux
    - build:macos
  artifacts:
    paths:
      - ./build/archived/
    expire_in: 1 week
  rules:
    - if: $CI_COMMIT_TAG

create_release:
  stage: release
  image: gitlab/glab
  script:
    - glab auth login --token $GITLAB_TOKEN_RELEASE
    - glab release create "$CI_COMMIT_TAG" ./build/archived/* --name "$CI_COMMIT_TAG_MESSAGE" --notes "Zoi release for $CI_COMMIT_TAG_MESSAGE"
  needs:
    - package:archive
  rules:
    - if: $CI_COMMIT_TAG

release:packages:
  stage: release-package
  image: archlinux:latest
  before_script:
    - pacman -Sy --needed --noconfirm base-devel sed git openssh
  script:
    - chmod +x ./build/publish.sh
    - ./build/publish.sh
  rules:
    - if: "$CI_COMMIT_MESSAGE =~ /^Release: Bump packages version to .*/"
