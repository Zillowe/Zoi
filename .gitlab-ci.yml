include:
  - template: Jobs/SAST.gitlab-ci.yml
  - template: Jobs/Secret-Detection.gitlab-ci.yml
  - template: Jobs/Dependency-Scanning.latest.gitlab-ci.yml

variables:
  DS_ENFORCE_NEW_ANALYZER: "true"

stages:
  - test
  - build
  - package
  - release
  - release-package

.cargo_cache:
  variables:
    CARGO_HOME: $CI_PROJECT_DIR/.cargo
  cache:
    key:
      files:
        - Cargo.lock
      prefix: $CI_COMMIT_REF_SLUG
    paths:
      - .cargo/
      - target/

.rust_setup:
  image: rust:latest
  before_script:
    - apt-get update -yq && apt-get install -y build-essential gcc

format:
  stage: test
  extends:
    - .cargo_cache
    - .rust_setup
  before_script:
    - rustup component add rustfmt
  script:
    - cargo fmt -- --check
  cache:
    policy: pull
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_BRANCH

lint:
  stage: test
  extends:
    - .cargo_cache
    - .rust_setup
  variables:
    RUSTFLAGS: "-Dwarnings"
  before_script:
    - rustup component add clippy
  script:
    - cargo clippy --all-targets --all-features
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_BRANCH

test:
  stage: test
  extends:
    - .cargo_cache
    - .rust_setup
  variables:
    RUSTFLAGS: "-Dwarnings"
  script:
    - cargo test --all-features
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_BRANCH

build:linux:
  stage: build
  image: rust:latest
  tags:
    - saas-linux-large-amd64
  before_script:
    - dpkg --add-architecture arm64
    - dpkg --add-architecture armhf
    - apt-get update -y && apt-get install -y build-essential gcc g++ gcc-aarch64-linux-gnu g++-aarch64-linux-gnu libssl-dev pkg-config libssl-dev:arm64 openssl libssl-dev:armhf gcc-mingw-w64-x86-64 g++-mingw-w64-x86-64 liblzma-dev:arm64
  script:
    - echo "Building Linux (amd64, arm64) and Windows (amd64) targets..."
    - chmod +x ./scripts/build-linux.sh
    - ./scripts/build-linux.sh
  artifacts:
    paths:
      - ./scripts/release/
    expire_in: 3 days
  rules:
    - if: $CI_COMMIT_TAG

build:macos:
  stage: build
  tags:
    - saas-macos-medium-m1
  image: macos-15-xcode-16
  before_script:
    - curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
    - source ~/.cargo/env
  script:
    - echo "Building macOS targets (amd64, arm64)..."
    - chmod +x ./scripts/build-macos.sh
    - ./scripts/build-macos.sh
  artifacts:
    paths:
      - ./scripts/release/
    expire_in: 3 days
  rules:
    - if: $CI_COMMIT_TAG

package:archive:
  stage: package
  image: ubuntu:latest
  before_script:
    - apt-get update -y && apt-get install -y p7zip-full tar zstd bsdiff curl git jq unzip gnupg coreutils
  script:
    - |
      set -euo pipefail
      echo "Aggregating build artifacts..."
      echo "Contents of the release directory:"
      ls -lR ./scripts/release/
      echo "Importing GPG key..."
      echo "$GPG_PRIVATE_KEY_B32" | base32 -d | gpg --batch --import
      echo "Running archive script..."
      chmod +x ./scripts/archive.sh
      ./scripts/archive.sh
      echo "Archiving complete."
  needs:
    - build:linux
    - build:macos
  artifacts:
    paths:
      - ./scripts/archived/
      - ./scripts/notes.sh
    expire_in: 3 days
  rules:
    - if: $CI_COMMIT_TAG

package:changelog:
  stage: package
  image: orhunp/git-cliff:latest
  variables:
    GIT_STRATEGY: clone
    GIT_DEPTH: 0
  script:
    - |
      if [ $(git tag -l | wc -l) -gt 1 ]; then
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 $(git rev-list --tags --skip=1 --max-count=1))
      fi
    - chmox +x ./scripts/log.sh
    - ./scripts/log.sh $PREVIOUS_TAG $CI_COMMIT_TAG
  needs:
    - package:archive
  rules:
    - if: $CI_COMMIT_TAG
  artifacts:
    paths:
      - release_notes.md
    expire_in: 3 days

create_release:
  stage: release
  image: gitlab/glab
  variables:
    GIT_DEPTH: 0
  script:
    - glab auth login --token $GITLAB_TOKEN_RELEASE
    - RELEASE_NAME="${CI_COMMIT_TAG_MESSAGE:-$CI_COMMIT_TAG}"
    - glab release create "$CI_COMMIT_TAG" ./scripts/archived/* --name "$RELEASE_NAME" --notes-file release_notes.md
  needs:
    - package:changelog
  rules:
    - if: $CI_COMMIT_TAG

release:packages:
  stage: release-package
  image: archlinux:latest
  before_script:
    - pacman -Sy --needed --noconfirm base-devel sed git openssh
  script:
    - chmod +x ./build/publish.sh
    - ./build/publish.sh
  rules:
    - if: "$CI_COMMIT_MESSAGE =~ /^Release: Bump packages version to .*/"

docs:update:
  stage: test
  image: alpine:latest
  before_script:
    - apk add --no-cache git
    - git config --global user.email "contact@zillowe.qzz.io"
    - git config --global user.name "Zillowe CI/CD"
  script:
    - echo "Cloning website repository..."
    - git clone "https://oauth2:${GITLAB_TOKEN_DOCS}@gitlab.com/Zillowe/Website.git"
    - cd Website
    - echo "Removing old documentation..."
    - rm -rf "content/docs/(main)/zds/zoi"
    - mkdir -p "content/docs/(main)/zds/zoi"
    - echo "Copying new documentation..."
    - cp -r "$CI_PROJECT_DIR/docs/". "content/docs/(main)/zds/zoi"
    - |
      git add .
      if git diff --staged --quiet; then
        echo "No changes to the documentation."
      else
        echo "Committing and pushing changes..."
        git commit -m "Docs: Update Zoi documentation from $CI_COMMIT_SHA"
        git push
      fi
  rules:
    - if: "$CI_COMMIT_MESSAGE =~ /^Docs: Docs/"
