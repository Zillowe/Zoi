stages:
  - test
  - build
  - release

check_build:
  stage: test
  image: rust:latest
  
  before_script:
    - apt-get update -y && apt-get install -y gcc p7zip-full tar
  
  script:
    - echo "Running a quick compilation check..."
    - cargo check --verbose
  
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_BRANCH

build_job:
  stage: build
  image: docker:20.10.16

  services:
    - name: docker:20.10.16-dind
      alias: docker
  
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
    DOCKER_DRIVER: overlay2
    CARGO_HOME: /usr/local/cargo
    CROSS_TARGETS: "x86_64-unknown-linux-gnu aarch64-unknown-linux-gnu x86_64-apple-darwin aarch64-apple-darwin x86_64-pc-windows-gnu aarch64-pc-windows-gnu"

  before_script:
    - apk add --no-cache bash git curl gcc musl-dev p7zip tar xz perl-utils
    - curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain stable
    - export PATH="$CARGO_HOME/bin:$PATH"
    - echo "Pre-installing Rust targets..."
    - for target in $CROSS_TARGETS; do rustup target add "$target"; done
    - cargo install cross
 
  script:
    - echo "Building Zoi for release..."
    - chmod +x ./build/*.sh
    - ./build/build-all.sh
    - ./build/archive.sh
    - echo "Build and archiving complete."
    - ls -l ./build/archived/
  
  artifacts:
    paths:
      - ./build/archived/
    expire_in: 1 week

  rules:
    - if: $CI_COMMIT_TAG

create_release:
  stage: release
  image: registry.gitlab.com/gitlab-org/cli:latest
  needs:
    - build_job

  script:
    - echo "Creating GitLab Release for tag $CI_COMMIT_TAG..."
    - glab release create "$CI_COMMIT_TAG" ./build/archived/* --title "$CI_COMMIT_TAG" --notes "Official release for Zoi version $CI_COMMIT_TAG"
    - echo "Release created successfully."
  
  rules:
    - if: $CI_COMMIT_TAG
