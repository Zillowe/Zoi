stages:
  - test
  - build
  - package
  - release

check_build:
  stage: test
  image: rust:latest
  tags:
    - saas-linux-medium-amd64
  variables:
    RUSTFLAGS: "-Dwarnings"
  before_script:
    - apt-get update -y && apt-get install -y build-essential gcc
    - rustup component add clippy
    - rustup component add rustfmt
    - cargo install cargo-machete
    - git config --global user.name "Zoi CI Bot"
    - git config --global user.email "bot@${CI_SERVER_HOST}"
    - curl -sL "https://gitlab.com/gitlab-org/cli/-/releases/v1.63.0/downloads/glab_1.63.0_linux_amd64.deb" -o glab.deb
    - dpkg -i glab.deb && rm glab.deb
    - glab auth login --token $GITLAB_TOKEN_RELEASE
  script:
    - echo "--- Checking for unused dependencies ---"
    - cargo machete --fix
    - echo "--- Applying automated code quality fixes ---"
    - cargo check --verbose
    - echo "Applying rustfmt..."
    - cargo fmt --all
    - echo "Applying clippy fixes..."
    - cargo clippy --all-targets --fix --allow-dirty --allow-staged || echo "Clippy finished."
    - cargo check --verbose
    - echo "--- Checking for changes to commit ---"
    - |
      if [[ -n $(git status --porcelain) ]]; then
        echo "Changes detected by automated tools. Creating a fix-up Merge Request..."
        BRANCH_NAME="chore/ci-fixes-main-$(date +%s)-${CI_JOB_ID}"
        git checkout -b "$BRANCH_NAME"
        git add .
        git commit -m "chore(ci): Apply automated fixes for ${CI_COMMIT_REF_NAME}" -m "This MR contains automated code style and linting fixes applied by the CI pipeline." -m "[skip ci]"
        git push "https://gitlab-ci-token:${CI_PUSH_TOKEN}@${CI_SERVER_HOST}/${CI_PROJECT_PATH}.git" "${BRANCH_NAME}"
        glab mr create \
          --source-branch "${BRANCH_NAME}" \
          --target-branch "${CI_COMMIT_REF_NAME}" \
          --title "chore: Automated CI fixes for '${CI_COMMIT_REF_NAME}'" \
          --description "This MR was created by the CI pipeline to apply automated \`rustfmt\` and \`clippy\` fixes. It may also remove unused dependencies detected by \`cargo-machete\`. Please review and merge. **Pipeline:** ${CI_SERVER_URL}/${CI_PROJECT_PATH}/-/pipelines/${CI_PIPELINE_ID}" \
          --label "Bot/Automated Fix" \
          --label "Kind/Enhancement" \
          --remove-source-branch \
          --yes
        echo "Merge Request created successfully."
      else
        echo "No changes needed. Code is clean."
      fi
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_COMMIT_BRANCH =~ /^chore\/ci-fixes-.*/
      when: never
    - when: on_success

build:linux:
  stage: build
  image: rust:latest
  tags:
    - saas-linux-large-amd64
  before_script:
    - dpkg --add-architecture arm64
    - dpkg --add-architecture armhf
    - apt-get update -y && apt-get install -y build-essential gcc gcc-aarch64-linux-gnu libssl-dev pkg-config libssl-dev:arm64 openssl libssl-dev:armhf gcc-mingw-w64-x86-64 liblzma-dev:arm64
  script:
    - echo "Building Linux targets (amd64, arm64) and Windows (amd64)..."
    - chmod +x ./build/build-linux.sh
    - ./build/build-linux.sh
  artifacts:
    paths:
      - ./build/release/
    expire_in: 1 week
  rules:
    - if: $CI_COMMIT_TAG

build:macos:
  stage: build
  tags:
    - saas-macos-medium-m1
  image: macos-15-xcode-16
  before_script:
    - curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
    - source ~/.cargo/env
  script:
    - echo "Building macOS targets (amd64, arm64)..."
    - chmod +x ./build/build-macos.sh
    - ./build/build-macos.sh
  artifacts:
    paths:
      - ./build/release/
    expire_in: 1 week
  rules:
    - if: $CI_COMMIT_TAG

package:archive:
  stage: package
  image: ubuntu:latest
  before_script:
    - apt-get update -y && apt-get install -y p7zip-full tar xz-utils libdigest-sha-perl
  script:
    - echo "Aggregating build artifacts..."
    - echo "Contents of the release directory:"
    - ls -lR ./build/release/
    - echo "Running archive script..."
    - chmod +x ./build/archive.sh
    - ./build/archive.sh
    - echo "Archiving complete."
  needs:
    - check_build
    - build:linux
    - build:macos
  artifacts:
    paths:
      - ./build/archived/
    expire_in: 1 week
  rules:
    - if: $CI_COMMIT_TAG

create_release:
  stage: release
  image: gitlab/glab
  script:
    - glab auth login --token $GITLAB_TOKEN_RELEASE
    - glab release create "$CI_COMMIT_TAG" ./build/archived/* --name "$CI_COMMIT_TAG_MESSAGE" --notes "Zoi release for $CI_COMMIT_TAG_MESSAGE"
  needs:
    - package:archive
  rules:
    - if: $CI_COMMIT_TAG
