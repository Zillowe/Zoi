stages:
  - test
  - build
  - release

check_build:
  stage: test
  image: rust:latest
  
  before_script:
    - apt-get update -y && apt-get install -y gcc p7zip-full tar
  
  script:
    - echo "Running a quick compilation check..."
    - cargo check --verbose
  
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_BRANCH

build_job:
  stage: build
  image: rust:latest
  
  services:
   - docker:19.03.12-dind

  variables:
    DOCKER_HOST: "tcp://docker:2375"
    DOCKER_DRIVER: "overlay2"

  before_script:
    - apt -qq update
    - apt install -y apt-transport-https ca-certificates curl gnupg2 software-properties-common > /dev/null
    - curl -fsSL https://download.docker.com/linux/debian/gpg | apt-key add -
    - add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/debian $(lsb_release -cs) stable"
    - apt -qq update
    - apt install -y docker-ce > /dev/null
    - cargo install -q cross cargo install --git https://github.com/schrieveslaach/cross.git --branch docker-remote
 
  script:
    - echo "Building Zoi for release..."
    - chmod +x ./build/*.sh
    - ./build/build-all.sh
    - ./build/archive.sh
    - echo "Build and archiving complete."
    - ls -l ./build/archived/
  
  artifacts:
    paths:
      - ./build/archived/
    expire_in: 1 week

  rules:
    - if: $CI_COMMIT_TAG

create_release:
  stage: release
  image: registry.gitlab.com/gitlab-org/cli:latest
  needs:
    - build_job

  script:
    - echo "Creating GitLab Release for tag $CI_COMMIT_TAG..."
    - glab release create "$CI_COMMIT_TAG" ./build/archived/* --title "$CI_COMMIT_TAG_MESSAGE" --notes "Official release for Zoi version $CI_COMMIT_TAG"
    - echo "Release created successfully."
  
  rules:
    - if: $CI_COMMIT_TAG
