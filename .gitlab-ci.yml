stages:
  - test
  - build
  - package
  - release
  - release-package

check_build:
  stage: test
  image: rust:latest
  tags:
    - saas-linux-large-amd64
  variables:
    RUSTFLAGS: "-Dwarnings"
  before_script:
    - apt-get update -y && apt-get install -y build-essential gcc
  script:
    - echo "--- Checking build ---"
    - cargo check --verbose
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_BRANCH

build:linux:
  stage: build
  image: rust:latest
  tags:
    - saas-linux-large-amd64
  before_script:
    - dpkg --add-architecture arm64
    - dpkg --add-architecture armhf
    - apt-get update -y && apt-get install -y build-essential gcc gcc-aarch64-linux-gnu libssl-dev pkg-config libssl-dev:arm64 openssl libssl-dev:armhf gcc-mingw-w64-x86-64 liblzma-dev:arm64
  script:
    - echo "Building Linux (amd64, arm64) and Windows (amd64) targets..."
    - chmod +x ./build/build-linux.sh
    - ./build/build-linux.sh
  artifacts:
    paths:
      - ./build/release/
    expire_in: 3 days
  rules:
    - if: $CI_COMMIT_TAG

build:macos:
  stage: build
  tags:
    - saas-macos-medium-m1
  image: macos-15-xcode-16
  before_script:
    - curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
    - source ~/.cargo/env
  script:
    - echo "Building macOS targets (amd64, arm64)..."
    - chmod +x ./build/build-macos.sh
    - ./build/build-macos.sh
  artifacts:
    paths:
      - ./build/release/
    expire_in: 3 days
  rules:
    - if: $CI_COMMIT_TAG

package:archive:
  stage: package
  image: ubuntu:latest
  before_script:
    - apt-get update -y && apt-get install -y p7zip-full tar zstd bsdiff curl git jq unzip
  script:
    - echo "Aggregating build artifacts..."
    - echo "Contents of the release directory:"
    - ls -lR ./build/release/
    - echo "Running archive script..."
    - chmod +x ./build/archive.sh
    - ./build/archive.sh
    - echo "Archiving complete."
  needs:
    - job: check_build
      optional: true
    - build:linux
    - build:macos
  artifacts:
    paths:
      - ./build/archived/
    expire_in: 3 days
  rules:
    - if: $CI_COMMIT_TAG

create_release:
  stage: release
  image: gitlab/glab
  variables:
    GIT_DEPTH: 0
  script:
    - glab auth login --token $GITLAB_TOKEN_RELEASE
    - |
      set -e
      if [ $(git tag -l | wc -l) -gt 1 ]; then
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 $(git rev-list --tags --skip=1 --max-count=1))
        COMMIT_RANGE="$PREVIOUS_TAG..$CI_COMMIT_TAG"
      else
        COMMIT_RANGE="$CI_COMMIT_TAG"
      fi
      CHANGELOG=$(git log --pretty=format:"* %s (%h)" $COMMIT_RANGE)
      MERGED_MRS=$(git log $COMMIT_RANGE | grep -oE 'See merge request !([0-9]+)' | sed 's/See merge request/!/' | sort -u)
      CLOSED_ISSUES=$(git log $COMMIT_RANGE | grep -oE '(Closes|closes|Fixes|fixes) #[0-9]+' | sed -E 's/.*#/#/' | sort -u)
      RELEASE_NOTES="## Changelog\n\n$CHANGELOG"
      if [ -n "$MERGED_MRS" ]; then
        MR_LIST=$(echo "$MERGED_MRS" | sed 's/^/* /')
        RELEASE_NOTES="$RELEASE_NOTES\n\n### Merged Merge Requests\n$MR_LIST"
      fi
      if [ -n "$CLOSED_ISSUES" ]; then
        ISSUE_LIST=$(echo "$CLOSED_ISSUES" | sed 's/^/* /')
        RELEASE_NOTES="$RELEASE_NOTES\n\n### Closed Issues\n$ISSUE_LIST"
      fi
      RELEASE_NAME="${CI_COMMIT_TAG_MESSAGE:-$CI_COMMIT_TAG}"
      glab release create "$CI_COMMIT_TAG" ./build/archived/* --name "$RELEASE_NAME" --notes-file - <<< "$RELEASE_NOTES"
  needs:
    - package:archive
  rules:
    - if: $CI_COMMIT_TAG

release:packages:
  stage: release-package
  image: archlinux:latest
  before_script:
    - pacman -Sy --needed --noconfirm base-devel sed git openssh
  script:
    - chmod +x ./build/publish.sh
    - ./build/publish.sh
  rules:
    - if: "$CI_COMMIT_MESSAGE =~ /^Release: Bump packages version to .*/"
